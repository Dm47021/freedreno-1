#ifndef A3XX_XML
#define A3XX_XML

/* Autogenerated file, DO NOT EDIT manually!

This file was generated by the rules-ng-ng headergen tool in this git repository:
http://0x04.net/cgit/index.cgi/rules-ng-ng
git clone git://0x04.net/rules-ng-ng

The rules-ng-ng source files this header was generated from are:
- /home/robclark/src/freedreno/envytools/rnndb/a3xx.xml                (  35892 bytes, from 2013-04-04 17:54:23)
- /home/robclark/src/freedreno/envytools/rnndb/freedreno_copyright.xml (   1453 bytes, from 2013-03-31 16:51:27)
- /home/robclark/src/freedreno/envytools/rnndb/adreno_common.xml       (   2797 bytes, from 2013-04-04 17:52:36)
- /home/robclark/src/freedreno/envytools/rnndb/adreno_pm4.xml          (   7494 bytes, from 2013-04-04 17:47:17)

Copyright (C) 2013 by the following authors:
- Rob Clark <robdclark@gmail.com> (robclark)

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice (including the
next paragraph) shall be included in all copies or substantial
portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/


enum a3xx_render_mode {
	RB_RENDERING_PASS = 0,
	RB_RESOLVE_PASS = 2,
};

enum a3xx_tile_mode {
	LINEAR = 0,
	TILE_32X32 = 2,
};

enum a3xx_color_format {
	RB_R8G8B8A8_UNORM = 8,
};

enum a3xx_dither_mode {
	DITHER_DISABLE = 0,
	DITHER_ALWAYS = 1,
	DITHER_IF_ALPHA_OFF = 2,
};

enum a3xx_threadmode {
	MULTI = 0,
};

enum a3xx_instrbuffermode {
	BUFFER = 1,
};

enum a3xx_threadsize {
	TWO_QUADS = 0,
	FOUR_QUADS = 1,
};

enum a3xx_state_block_id {
	HLSQ_BLOCK_ID_TP_TEX = 2,
	HLSQ_BLOCK_ID_TP_MIPMAP = 3,
	HLSQ_BLOCK_ID_SP_VS = 4,
	HLSQ_BLOCK_ID_SP_FS = 6,
};

enum a3xx_fmt {
	FMT_FLOAT_32 = 0,
	FMT_FLOAT_32_32 = 1,
	FMT_FLOAT_32_32_32 = 2,
	FMT_FLOAT_32_32_32_32 = 3,
	FMT_FIXED_32 = 8,
	FMT_FIXED_32_32 = 9,
	FMT_FIXED_32_32_32 = 10,
	FMT_FIXED_32_32_32_32 = 11,
	FMT_SHORT_16 = 16,
	FMT_SHORT_16_16 = 17,
	FMT_SHORT_16_16_16 = 18,
	FMT_SHORT_16_16_16_16 = 19,
	FMT_USHORT_16 = 20,
	FMT_USHORT_16_16 = 21,
	FMT_USHORT_16_16_16 = 22,
	FMT_USHORT_16_16_16_16 = 23,
	FMT_NORM_SHORT_16 = 24,
	FMT_NORM_SHORT_16_16 = 25,
	FMT_NORM_SHORT_16_16_16 = 26,
	FMT_NORM_SHORT_16_16_16_16 = 27,
	FMT_NORM_USHORT_16 = 28,
	FMT_NORM_USHORT_16_16 = 29,
	FMT_NORM_USHORT_16_16_16 = 30,
	FMT_NORM_USHORT_16_16_16_16 = 31,
	FMT_UBYTE_8 = 40,
	FMT_UBYTE_8_8 = 41,
	FMT_UBYTE_8_8_8 = 42,
	FMT_UBYTE_8_8_8_8 = 43,
	FMT_NORM_UBYTE_8 = 44,
	FMT_NORM_UBYTE_8_8 = 45,
	FMT_NORM_UBYTE_8_8_8 = 46,
	FMT_NORM_UBYTE_8_8_8_8 = 47,
	FMT_BYTE_8 = 48,
	FMT_BYTE_8_8 = 49,
	FMT_BYTE_8_8_8 = 50,
	FMT_BYTE_8_8_8_8 = 51,
	FMT_NORM_BYTE_8 = 52,
	FMT_NORM_BYTE_8_8 = 53,
	FMT_NORM_BYTE_8_8_8 = 54,
	FMT_NORM_BYTE_8_8_8_8 = 55,
};

enum a3xx_msaa_samples {
	MSAA_ONE = 0,
	MSAA_TWO = 1,
	MSAA_FOUR = 2,
};

#define REG_A3XX_RBBM_HW_VERSION				0x00000000

#define REG_A3XX_RBBM_HW_RELEASE				0x00000001

#define REG_A3XX_RBBM_HW_CONFIGURATION				0x00000002

#define REG_A3XX_RBBM_CLOCK_CTL					0x00000010

#define REG_A3XX_RBBM_SP_HYST_CNT				0x00000012

#define REG_A3XX_RBBM_SW_RESET_CMD				0x00000018

#define REG_A3XX_RBBM_AHB_CTL0					0x00000020

#define REG_A3XX_RBBM_AHB_CTL1					0x00000021

#define REG_A3XX_RBBM_AHB_CMD					0x00000022

#define REG_A3XX_RBBM_AHB_ERROR_STATUS				0x00000027

#define REG_A3XX_RBBM_GPR0_CTL					0x0000002e

#define REG_A3XX_RBBM_STATUS					0x00000030

#define REG_A3XX_RBBM_WAIT_IDLE_CLOCKS_CTL			0x00000033

#define REG_A3XX_RBBM_INTERFACE_HANG_INT_CTL			0x00000050

#define REG_A3XX_RBBM_INTERFACE_HANG_MASK_CTL0			0x00000051

#define REG_A3XX_RBBM_INTERFACE_HANG_MASK_CTL1			0x00000054

#define REG_A3XX_RBBM_INTERFACE_HANG_MASK_CTL2			0x00000057

#define REG_A3XX_RBBM_INTERFACE_HANG_MASK_CTL3			0x0000005a

#define REG_A3XX_RBBM_INT_CLEAR_CMD				0x00000061

#define REG_A3XX_RBBM_INT_0_MASK				0x00000063

#define REG_A3XX_RBBM_INT_0_STATUS				0x00000064

#define REG_A3XX_RBBM_PERFCTR_CTL				0x00000080

#define REG_A3XX_RBBM_GPU_BUSY_MASKED				0x00000088

#define REG_A3XX_RBBM_PERFCTR_SP_7_LO				0x000000e0

#define REG_A3XX_RBBM_PERFCTR_SP_7_HI				0x000000e1

#define REG_A3XX_RBBM_PERFCTR_PWR_1_LO				0x000000ec

#define REG_A3XX_RBBM_PERFCTR_PWR_1_HI				0x000000ed

#define REG_A3XX_RBBM_RBBM_CTL					0x00000100

#define REG_A3XX_RBBM_RBBM_CTL					0x00000100

#define REG_A3XX_RBBM_DEBUG_BUS_CTL				0x00000111

#define REG_A3XX_RBBM_DEBUG_BUS_DATA_STATUS			0x00000112

#define REG_A3XX_CP_PFP_UCODE_ADDR				0x000001c9

#define REG_A3XX_CP_PFP_UCODE_DATA				0x000001ca

#define REG_A3XX_CP_ROQ_ADDR					0x000001cc

#define REG_A3XX_CP_ROQ_DATA					0x000001cd

#define REG_A3XX_CP_MERCIU_ADDR					0x000001d1

#define REG_A3XX_CP_MERCIU_DATA					0x000001d2

#define REG_A3XX_CP_MERCIU_DATA2				0x000001d3

#define REG_A3XX_CP_MEQ_ADDR					0x000001da

#define REG_A3XX_CP_MEQ_DATA					0x000001db

#define REG_A3XX_CP_HW_FAULT					0x0000045c

#define REG_A3XX_CP_PROTECT_CTRL				0x0000045e

#define REG_A3XX_CP_PROTECT_STATUS				0x0000045f

#define REG_A3XX_CP_PROTECT(i0)				       (0x00000460 + 0x1*(i0))

#define REG_A3XX_CP_PROTECT_REG(i0)			       (0x00000460 + 0x1*(i0))

#define REG_A3XX_CP_AHB_FAULT					0x0000054d

#define REG_A3XX_CP_SCRATCH_REG2				0x0000057a

#define REG_A3XX_CP_SCRATCH_REG3				0x0000057b

#define REG_A3XX_GRAS_CL_CLIP_CNTL				0x00002040
#define A3XX_GRAS_CL_CLIP_CNTL_IJ_PERSP_CENTER			0x00001000
#define A3XX_GRAS_CL_CLIP_CNTL_CLIP_DISABLE			0x00010000
#define A3XX_GRAS_CL_CLIP_CNTL_ZFAR_CLIP_DISABLE		0x00020000
#define A3XX_GRAS_CL_CLIP_CNTL_VP_CLIP_CODE_IGNORE		0x00080000
#define A3XX_GRAS_CL_CLIP_CNTL_VP_XFORM_DISABLE			0x00100000
#define A3XX_GRAS_CL_CLIP_CNTL_PERSP_DIVISION_DISABLE		0x00200000

#define REG_A3XX_GRAS_CL_GB_CLIP_ADJ				0x00002044
static inline uint32_t A3XX_GRAS_CL_GB_CLIP_ADJ_HORZ(uint32_t val)
{
	return ((val) << 0) & 0x3ff;
}
static inline uint32_t A3XX_GRAS_CL_GB_CLIP_ADJ_VERT(uint32_t val)
{
	return ((val) << 10) & 0xffc00;
}

#define REG_A3XX_GRAS_CL_VPORT_XOFFSET				0x00002048
static inline uint32_t A3XX_GRAS_CL_VPORT_XOFFSET(float val)
{
	return ((fui(val)) << 0) & 0xffffffff;
}

#define REG_A3XX_GRAS_CL_VPORT_XSCALE				0x00002049
static inline uint32_t A3XX_GRAS_CL_VPORT_XSCALE(float val)
{
	return ((fui(val)) << 0) & 0xffffffff;
}

#define REG_A3XX_GRAS_CL_VPORT_YOFFSET				0x0000204a
static inline uint32_t A3XX_GRAS_CL_VPORT_YOFFSET(float val)
{
	return ((fui(val)) << 0) & 0xffffffff;
}

#define REG_A3XX_GRAS_CL_VPORT_YSCALE				0x0000204b
static inline uint32_t A3XX_GRAS_CL_VPORT_YSCALE(float val)
{
	return ((fui(val)) << 0) & 0xffffffff;
}

#define REG_A3XX_GRAS_CL_VPORT_ZOFFSET				0x0000204c
static inline uint32_t A3XX_GRAS_CL_VPORT_ZOFFSET(float val)
{
	return ((fui(val)) << 0) & 0xffffffff;
}

#define REG_A3XX_GRAS_CL_VPORT_ZSCALE				0x0000204d
static inline uint32_t A3XX_GRAS_CL_VPORT_ZSCALE(float val)
{
	return ((fui(val)) << 0) & 0xffffffff;
}

#define REG_A3XX_GRAS_SU_POINT_MINMAX				0x00002068

#define REG_A3XX_GRAS_SU_POINT_SIZE				0x00002069

#define REG_A3XX_GRAS_SU_POLY_OFFSET_SCALE			0x0000206c
static inline uint32_t A3XX_GRAS_SU_POLY_OFFSET_SCALE_VAL(float val)
{
	return ((((uint32_t)(val * 40.0))) << 0) & 0xffffff;
}

#define REG_A3XX_GRAS_SU_POLY_OFFSET_OFFSET			0x0000206d
static inline uint32_t A3XX_GRAS_SU_POLY_OFFSET_OFFSET(float val)
{
	return ((((uint32_t)(val * 44.0))) << 0) & 0xffffffff;
}

#define REG_A3XX_GRAS_SU_MODE_CONTROL				0x00002070
#define A3XX_GRAS_SU_MODE_CONTROL_CULL_FRONT			0x00000001
#define A3XX_GRAS_SU_MODE_CONTROL_CULL_BACK			0x00000002
static inline uint32_t A3XX_GRAS_SU_MODE_CONTROL_LINEHALFWIDTH(uint32_t val)
{
	return ((val) << 2) & 0x7fc;
}
#define A3XX_GRAS_SU_MODE_CONTROL_POLY_OFFSET			0x00000800

#define REG_A3XX_GRAS_SC_CONTROL				0x00002072
static inline uint32_t A3XX_GRAS_SC_CONTROL_RENDER_MODE(uint32_t val)
{
	return ((val) << 4) & 0xf0;
}
static inline uint32_t A3XX_GRAS_SC_CONTROL_MSAA_SAMPLES(enum a3xx_msaa_samples val)
{
	return ((val) << 8) & 0xf00;
}
static inline uint32_t A3XX_GRAS_SC_CONTROL_RASTER_MODE(uint32_t val)
{
	return ((val) << 12) & 0xf000;
}

#define REG_A3XX_GRAS_SC_SCREEN_SCISSOR_TL			0x00002074
#define A3XX_GRAS_SC_SCREEN_SCISSOR_TL_WINDOW_OFFSET_DISABLE	0x80000000
static inline uint32_t A3XX_GRAS_SC_SCREEN_SCISSOR_TL_X(uint32_t val)
{
	return ((val) << 0) & 0x7fff;
}
static inline uint32_t A3XX_GRAS_SC_SCREEN_SCISSOR_TL_Y(uint32_t val)
{
	return ((val) << 16) & 0x7fff0000;
}

#define REG_A3XX_GRAS_SC_SCREEN_SCISSOR_BR			0x00002075
#define A3XX_GRAS_SC_SCREEN_SCISSOR_BR_WINDOW_OFFSET_DISABLE	0x80000000
static inline uint32_t A3XX_GRAS_SC_SCREEN_SCISSOR_BR_X(uint32_t val)
{
	return ((val) << 0) & 0x7fff;
}
static inline uint32_t A3XX_GRAS_SC_SCREEN_SCISSOR_BR_Y(uint32_t val)
{
	return ((val) << 16) & 0x7fff0000;
}

#define REG_A3XX_GRAS_SC_WINDOW_SCISSOR_TL			0x00002079
#define A3XX_GRAS_SC_WINDOW_SCISSOR_TL_WINDOW_OFFSET_DISABLE	0x80000000
static inline uint32_t A3XX_GRAS_SC_WINDOW_SCISSOR_TL_X(uint32_t val)
{
	return ((val) << 0) & 0x7fff;
}
static inline uint32_t A3XX_GRAS_SC_WINDOW_SCISSOR_TL_Y(uint32_t val)
{
	return ((val) << 16) & 0x7fff0000;
}

#define REG_A3XX_GRAS_SC_WINDOW_SCISSOR_BR			0x0000207a
#define A3XX_GRAS_SC_WINDOW_SCISSOR_BR_WINDOW_OFFSET_DISABLE	0x80000000
static inline uint32_t A3XX_GRAS_SC_WINDOW_SCISSOR_BR_X(uint32_t val)
{
	return ((val) << 0) & 0x7fff;
}
static inline uint32_t A3XX_GRAS_SC_WINDOW_SCISSOR_BR_Y(uint32_t val)
{
	return ((val) << 16) & 0x7fff0000;
}

#define REG_A3XX_RB_MODE_CONTROL				0x000020c0
static inline uint32_t A3XX_RB_MODE_CONTROL_RENDER_MODE(enum a3xx_render_mode val)
{
	return ((val) << 8) & 0x700;
}
#define A3XX_RB_MODE_CONTROL_MARB_CACHE_SPLIT_MODE		0x00008000
#define A3XX_RB_MODE_CONTROL_PACKER_TIMER_ENABLE		0x00010000

#define REG_A3XX_RB_RENDER_CONTROL				0x000020c1
static inline uint32_t A3XX_RB_RENDER_CONTROL_BIN_WIDTH(uint32_t val)
{
	return ((val >> 5) << 4) & 0xff0;
}
#define A3XX_RB_RENDER_CONTROL_DISABLE_COLOR_PIPE		0x00001000
static inline uint32_t A3XX_RB_RENDER_CONTROL_ALPHA_TEST_FUNC(enum adreno_compare_func val)
{
	return ((val) << 24) & 0x7000000;
}

#define REG_A3XX_RB_MSAA_CONTROL				0x000020c2
#define A3XX_RB_MSAA_CONTROL_DISABLE				0x00000400
static inline uint32_t A3XX_RB_MSAA_CONTROL_SAMPLES(enum a3xx_msaa_samples val)
{
	return ((val) << 12) & 0xf000;
}
static inline uint32_t A3XX_RB_MSAA_CONTROL_SAMPLE_MASK(uint32_t val)
{
	return ((val) << 16) & 0xffff0000;
}

#define REG_A3XX_UNKNOWN_20C3					0x000020c3

#define REG_A3XX_RB_MRT(i0)				       (0x000020c4 + 0x4*(i0))

#define REG_A3XX_RB_MRT_CONTROL(i0)			       (0x000020c4 + 0x4*(i0))
#define A3XX_RB_MRT_CONTROL_READ_DEST_ENABLE			0x00000008
#define A3XX_RB_MRT_CONTROL_BLEND				0x00000010
#define A3XX_RB_MRT_CONTROL_BLEND2				0x00000020
static inline uint32_t A3XX_RB_MRT_CONTROL_ROP_CODE(uint32_t val)
{
	return ((val) << 8) & 0xf00;
}
static inline uint32_t A3XX_RB_MRT_CONTROL_DITHER_MODE(enum a3xx_dither_mode val)
{
	return ((val) << 12) & 0x3000;
}
static inline uint32_t A3XX_RB_MRT_CONTROL_COMPONENT_ENABLE(uint32_t val)
{
	return ((val) << 24) & 0xf000000;
}

#define REG_A3XX_RB_MRT_BUF_INFO(i0)			       (0x000020c5 + 0x4*(i0))
static inline uint32_t A3XX_RB_MRT_BUF_INFO_COLOR_FORMAT(enum a3xx_color_format val)
{
	return ((val) << 0) & 0x3f;
}
static inline uint32_t A3XX_RB_MRT_BUF_INFO_COLOR_TILE_MODE(enum a3xx_tile_mode val)
{
	return ((val) << 6) & 0xc0;
}
static inline uint32_t A3XX_RB_MRT_BUF_INFO_COLOR_BUF_PITCH(uint32_t val)
{
	return ((val >> 5) << 17) & 0xfffe0000;
}

#define REG_A3XX_RB_MRT_BUF_BASE(i0)			       (0x000020c6 + 0x4*(i0))
static inline uint32_t A3XX_RB_MRT_BUF_BASE_COLOR_BUF_BASE(uint32_t val)
{
	return ((val >> 5) << 4) & 0xfffffff0;
}

#define REG_A3XX_RB_MRT_BLEND_CONTROL(i0)		       (0x000020c7 + 0x4*(i0))
static inline uint32_t A3XX_RB_MRT_BLEND_CONTROL_RGB_SRC_FACTOR(enum adreno_rb_blend_factor val)
{
	return ((val) << 0) & 0x1f;
}
static inline uint32_t A3XX_RB_MRT_BLEND_CONTROL_RGB_BLEND_OPCODE(enum adreno_rb_blend_opcode val)
{
	return ((val) << 5) & 0xe0;
}
static inline uint32_t A3XX_RB_MRT_BLEND_CONTROL_RGB_DEST_FACTOR(enum adreno_rb_blend_factor val)
{
	return ((val) << 8) & 0x1f00;
}
static inline uint32_t A3XX_RB_MRT_BLEND_CONTROL_ALPHA_SRC_FACTOR(enum adreno_rb_blend_factor val)
{
	return ((val) << 16) & 0x1f0000;
}
static inline uint32_t A3XX_RB_MRT_BLEND_CONTROL_ALPHA_BLEND_OPCODE(enum adreno_rb_blend_opcode val)
{
	return ((val) << 21) & 0xe00000;
}
static inline uint32_t A3XX_RB_MRT_BLEND_CONTROL_ALPHA_DEST_FACTOR(enum adreno_rb_blend_factor val)
{
	return ((val) << 24) & 0x1f000000;
}
#define A3XX_RB_MRT_BLEND_CONTROL_CLAMP_ENABLE			0x20000000

#define REG_A3XX_RB_BLEND_RED					0x000020e4

#define REG_A3XX_RB_BLEND_GREEN					0x000020e5

#define REG_A3XX_RB_BLEND_BLUE					0x000020e6

#define REG_A3XX_RB_BLEND_ALPHA					0x000020e7

#define REG_A3XX_UNKNOWN_20E8					0x000020e8

#define REG_A3XX_UNKNOWN_20E9					0x000020e9

#define REG_A3XX_UNKNOWN_20EA					0x000020ea

#define REG_A3XX_UNKNOWN_20EB					0x000020eb

#define REG_A3XX_RB_COPY_CONTROL				0x000020ec
static inline uint32_t A3XX_RB_COPY_CONTROL_MSAA_RESOLVE(enum a3xx_msaa_samples val)
{
	return ((val) << 0) & 0x3;
}
#define A3XX_RB_COPY_CONTROL_MODE_RESOLVE			0x00000100
#define A3XX_RB_COPY_CONTROL_MODE_DEPTH_STENCIL			0x00000500
static inline uint32_t A3XX_RB_COPY_CONTROL_GMEM_BASE(uint32_t val)
{
	return ((val >> 14) << 14) & 0xffffc000;
}

#define REG_A3XX_RB_COPY_DEST_BASE				0x000020ed
static inline uint32_t A3XX_RB_COPY_DEST_BASE_BASE(uint32_t val)
{
	return ((val >> 5) << 4) & 0xfffffff0;
}

#define REG_A3XX_RB_COPY_DEST_PITCH				0x000020ee
static inline uint32_t A3XX_RB_COPY_DEST_PITCH_PITCH(uint32_t val)
{
	return ((val >> 5) << 0) & 0xffffffff;
}

#define REG_A3XX_RB_COPY_DEST_INFO				0x000020ef
static inline uint32_t A3XX_RB_COPY_DEST_INFO_TILE(enum a3xx_tile_mode val)
{
	return ((val) << 0) & 0x3;
}
static inline uint32_t A3XX_RB_COPY_DEST_INFO_FORMAT(enum a3xx_color_format val)
{
	return ((val) << 2) & 0xfc;
}
static inline uint32_t A3XX_RB_COPY_DEST_INFO_COMPONENT_ENABLE(uint32_t val)
{
	return ((val) << 14) & 0x3c000;
}
static inline uint32_t A3XX_RB_COPY_DEST_INFO_ENDIAN(enum adreno_rb_surface_endian val)
{
	return ((val) << 18) & 0x1c0000;
}

#define REG_A3XX_RB_DEPTH_CONTROL				0x00002100
#define A3XX_RB_DEPTH_CONTROL_Z_ENABLE				0x00000002
#define A3XX_RB_DEPTH_CONTROL_Z_WRITE_ENABLE			0x00000004
#define A3XX_RB_DEPTH_CONTROL_EARLY_Z_ENABLE			0x00000008
static inline uint32_t A3XX_RB_DEPTH_CONTROL_ZFUNC(enum adreno_compare_func val)
{
	return ((val) << 4) & 0x70;
}
#define A3XX_RB_DEPTH_CONTROL_BF_ENABLE				0x00000080
#define A3XX_RB_DEPTH_CONTROL_Z_TEST_ENABLE			0x80000000

#define REG_A3XX_UNKNOWN_2101					0x00002101

#define REG_A3XX_RB_DEPTH_INFO					0x00002102
#define A3XX_RB_DEPTH_INFO_DEPTH_FORMAT_DEPTHX_16		0x00000000
#define A3XX_RB_DEPTH_INFO_DEPTH_FORMAT_DEPTHX_24_8		0x00000001
static inline uint32_t A3XX_RB_DEPTH_INFO_DEPTH_BASE(uint32_t val)
{
	return ((val) << 11) & 0xfffff800;
}

#define REG_A3XX_RB_DEPTH_PITCH					0x00002103
static inline uint32_t A3XX_RB_DEPTH_PITCH(uint32_t val)
{
	return ((val >> 4) << 0) & 0xffffffff;
}

#define REG_A3XX_RB_STENCIL_CONTROL				0x00002104
#define A3XX_RB_STENCIL_CONTROL_STENCIL_ENABLE			0x00000001
#define A3XX_RB_STENCIL_CONTROL_STENCIL_ENABLE2			0x00000004
static inline uint32_t A3XX_RB_STENCIL_CONTROL_FUNC(enum adreno_compare_func val)
{
	return ((val) << 8) & 0x700;
}
static inline uint32_t A3XX_RB_STENCIL_CONTROL_FAIL(enum adreno_stencil_op val)
{
	return ((val) << 11) & 0x3800;
}
static inline uint32_t A3XX_RB_STENCIL_CONTROL_ZPASS(enum adreno_stencil_op val)
{
	return ((val) << 14) & 0x1c000;
}
static inline uint32_t A3XX_RB_STENCIL_CONTROL_ZFAIL(enum adreno_stencil_op val)
{
	return ((val) << 17) & 0xe0000;
}
static inline uint32_t A3XX_RB_STENCIL_CONTROL_FUNC_BF(enum adreno_compare_func val)
{
	return ((val) << 20) & 0x700000;
}
static inline uint32_t A3XX_RB_STENCIL_CONTROL_FAIL_BF(enum adreno_stencil_op val)
{
	return ((val) << 23) & 0x3800000;
}
static inline uint32_t A3XX_RB_STENCIL_CONTROL_ZPASS_BF(enum adreno_stencil_op val)
{
	return ((val) << 26) & 0x1c000000;
}
static inline uint32_t A3XX_RB_STENCIL_CONTROL_ZFAIL_BF(enum adreno_stencil_op val)
{
	return ((val) << 29) & 0xe0000000;
}

#define REG_A3XX_UNKNOWN_2105					0x00002105

#define REG_A3XX_UNKNOWN_2106					0x00002106

#define REG_A3XX_UNKNOWN_2107					0x00002107

#define REG_A3XX_RB_STENCILREFMASK				0x00002108
static inline uint32_t A3XX_RB_STENCILREFMASK_STENCILREF(uint32_t val)
{
	return ((val) << 0) & 0xff;
}
static inline uint32_t A3XX_RB_STENCILREFMASK_STENCILMASK(uint32_t val)
{
	return ((val) << 8) & 0xff00;
}
static inline uint32_t A3XX_RB_STENCILREFMASK_STENCILWRITEMASK(uint32_t val)
{
	return ((val) << 16) & 0xff0000;
}

#define REG_A3XX_RB_STENCILREFMASK_BF				0x00002109
static inline uint32_t A3XX_RB_STENCILREFMASK_BF_STENCILREF(uint32_t val)
{
	return ((val) << 0) & 0xff;
}
static inline uint32_t A3XX_RB_STENCILREFMASK_BF_STENCILMASK(uint32_t val)
{
	return ((val) << 8) & 0xff00;
}
static inline uint32_t A3XX_RB_STENCILREFMASK_BF_STENCILWRITEMASK(uint32_t val)
{
	return ((val) << 16) & 0xff0000;
}

#define REG_A3XX_PA_SC_WINDOW_OFFSET				0x0000210e
static inline uint32_t A3XX_PA_SC_WINDOW_OFFSET_X(uint32_t val)
{
	return ((val) << 0) & 0xffff;
}
static inline uint32_t A3XX_PA_SC_WINDOW_OFFSET_Y(uint32_t val)
{
	return ((val) << 16) & 0xffff0000;
}

#define REG_A3XX_PC_VSTREAM_CONTROL				0x000021e4

#define REG_A3XX_PC_VERTEX_REUSE_BLOCK_CNTL			0x000021ea

#define REG_A3XX_PC_PRIM_VTX_CNTL				0x000021ec
static inline uint32_t A3XX_PC_PRIM_VTX_CNTL_STRIDE_IN_VPC(uint32_t val)
{
	return ((val) << 0) & 0x1f;
}
static inline uint32_t A3XX_PC_PRIM_VTX_CNTL_POLYMODE_FRONT_PTYPE(enum adreno_pa_su_sc_draw val)
{
	return ((val) << 5) & 0xe0;
}
static inline uint32_t A3XX_PC_PRIM_VTX_CNTL_POLYMODE_BACK_PTYPE(enum adreno_pa_su_sc_draw val)
{
	return ((val) << 8) & 0x700;
}
#define A3XX_PC_PRIM_VTX_CNTL_PROVOKING_VTX_LAST		0x02000000

#define REG_A3XX_PC_RESTART_INDEX				0x000021ed

#define REG_A3XX_HLSQ_CONTROL_0_REG				0x00002200
static inline uint32_t A3XX_HLSQ_CONTROL_0_REG_FSTHREADSIZE(enum a3xx_threadsize val)
{
	return ((val) << 4) & 0x10;
}
#define A3XX_HLSQ_CONTROL_0_REG_FSSUPERTHREADENABLE		0x00000040
#define A3XX_HLSQ_CONTROL_0_REG_SPSHADERRESTART			0x00000200
#define A3XX_HLSQ_CONTROL_0_REG_RESERVED2			0x00000400
#define A3XX_HLSQ_CONTROL_0_REG_CHUNKDISABLE			0x04000000
#define A3XX_HLSQ_CONTROL_0_REG_CONSTSWITCHMODE			0x08000000
#define A3XX_HLSQ_CONTROL_0_REG_LAZYUPDATEDISABLE		0x10000000
#define A3XX_HLSQ_CONTROL_0_REG_SPCONSTFULLUPDATE		0x20000000
#define A3XX_HLSQ_CONTROL_0_REG_TPFULLUPDATE			0x40000000

#define REG_A3XX_HLSQ_CONTROL_1_REG				0x00002201
static inline uint32_t A3XX_HLSQ_CONTROL_1_REG_VSTHREADSIZE(enum a3xx_threadsize val)
{
	return ((val) << 6) & 0x40;
}
#define A3XX_HLSQ_CONTROL_1_REG_VSSUPERTHREADENABLE		0x00000100
#define A3XX_HLSQ_CONTROL_1_REG_RESERVED1			0x00000200

#define REG_A3XX_HLSQ_CONTROL_2_REG				0x00002202
static inline uint32_t A3XX_HLSQ_CONTROL_2_REG_PRIMALLOCTHRESHOLD(uint32_t val)
{
	return ((val) << 26) & 0xfc000000;
}

#define REG_A3XX_HLSQ_CONTROL_3_REG				0x00002203

#define REG_A3XX_HLSQ_VS_CONTROL_REG				0x00002204
static inline uint32_t A3XX_HLSQ_VS_CONTROL_REG_CONSTLENGTH(uint32_t val)
{
	return ((val) << 0) & 0xfff;
}
static inline uint32_t A3XX_HLSQ_VS_CONTROL_REG_CONSTSTARTOFFSET(uint32_t val)
{
	return ((val) << 12) & 0xfff000;
}
static inline uint32_t A3XX_HLSQ_VS_CONTROL_REG_INSTRLENGTH(uint32_t val)
{
	return ((val) << 24) & 0xff000000;
}

#define REG_A3XX_HLSQ_FS_CONTROL_REG				0x00002205
static inline uint32_t A3XX_HLSQ_FS_CONTROL_REG_CONSTLENGTH(uint32_t val)
{
	return ((val) << 0) & 0xfff;
}
static inline uint32_t A3XX_HLSQ_FS_CONTROL_REG_CONSTSTARTOFFSET(uint32_t val)
{
	return ((val) << 12) & 0xfff000;
}
static inline uint32_t A3XX_HLSQ_FS_CONTROL_REG_INSTRLENGTH(uint32_t val)
{
	return ((val) << 24) & 0xff000000;
}

#define REG_A3XX_HLSQ_CONST_VSPRESV_RANGE_REG			0x00002206
static inline uint32_t A3XX_HLSQ_CONST_VSPRESV_RANGE_REG_STARTENTRY(uint32_t val)
{
	return ((val) << 0) & 0xffff;
}
static inline uint32_t A3XX_HLSQ_CONST_VSPRESV_RANGE_REG_ENDENTRY(uint32_t val)
{
	return ((val) << 16) & 0xffff0000;
}

#define REG_A3XX_HLSQ_CONST_FSPRESV_RANGE_REG			0x00002207
static inline uint32_t A3XX_HLSQ_CONST_FSPRESV_RANGE_REG_STARTENTRY(uint32_t val)
{
	return ((val) << 0) & 0xffff;
}
static inline uint32_t A3XX_HLSQ_CONST_FSPRESV_RANGE_REG_ENDENTRY(uint32_t val)
{
	return ((val) << 16) & 0xffff0000;
}

#define REG_A3XX_HLSQ_CL_NDRANGE_0_REG				0x0000220a

#define REG_A3XX_HLSQ_CL_NDRANGE_1_REG				0x0000220b

#define REG_A3XX_HLSQ_CL_NDRANGE_2_REG				0x0000220c

#define REG_A3XX_HLSQ_CL_CONTROL_0_REG				0x00002211

#define REG_A3XX_HLSQ_CL_CONTROL_1_REG				0x00002212

#define REG_A3XX_HLSQ_CL_KERNEL_CONST_REG			0x00002214

#define REG_A3XX_HLSQ_CL_KERNEL_GROUP_X_REG			0x00002215

#define REG_A3XX_HLSQ_CL_KERNEL_GROUP_Z_REG			0x00002217

#define REG_A3XX_HLSQ_CL_WG_OFFSET_REG				0x0000221a

#define REG_A3XX_VFD_CONTROL_0					0x00002240
static inline uint32_t A3XX_VFD_CONTROL_0_TOTALATTRTOVS(uint32_t val)
{
	return ((val) << 0) & 0x3ffff;
}
static inline uint32_t A3XX_VFD_CONTROL_0_PACKETSIZE(uint32_t val)
{
	return ((val) << 18) & 0x3c0000;
}
static inline uint32_t A3XX_VFD_CONTROL_0_STRMDECINSTRCNT(uint32_t val)
{
	return ((val) << 22) & 0x7c00000;
}
static inline uint32_t A3XX_VFD_CONTROL_0_STRMFETCHINSTRCNT(uint32_t val)
{
	return ((val) << 27) & 0xf8000000;
}

#define REG_A3XX_VFD_CONTROL_1					0x00002241
static inline uint32_t A3XX_VFD_CONTROL_1_MAXSTORAGE(uint32_t val)
{
	return ((val) << 0) & 0xffff;
}

#define REG_A3XX_VFD_INDEX_MIN					0x00002242

#define REG_A3XX_VFD_INDEX_MAX					0x00002243

#define REG_A3XX_VFD_INSTANCEID_OFFSET				0x00002244

#define REG_A3XX_VFD_INDEX_OFFSET				0x00002245

#define REG_A3XX_VFD_FETCH(i0)				       (0x00002246 + 0x2*(i0))

#define REG_A3XX_VFD_FETCH_INSTR_0(i0)			       (0x00002246 + 0x2*(i0))
static inline uint32_t A3XX_VFD_FETCH_INSTR_0_FETCHSIZE(uint32_t val)
{
	return ((val) << 0) & 0x7f;
}
static inline uint32_t A3XX_VFD_FETCH_INSTR_0_BUFSTRIDE(uint32_t val)
{
	return ((val) << 7) & 0x1ff80;
}
#define A3XX_VFD_FETCH_INSTR_0_SWITCHNEXT			0x00020000
static inline uint32_t A3XX_VFD_FETCH_INSTR_0_INDEXCODE(uint32_t val)
{
	return ((val) << 18) & 0xfc0000;
}
static inline uint32_t A3XX_VFD_FETCH_INSTR_0_STEPRATE(uint32_t val)
{
	return ((val) << 24) & 0xff000000;
}

#define REG_A3XX_VFD_FETCH_INSTR_1(i0)			       (0x00002247 + 0x2*(i0))

#define REG_A3XX_VFD_DECODE(i0)				       (0x00002266 + 0x1*(i0))

#define REG_A3XX_VFD_DECODE_INSTR(i0)			       (0x00002266 + 0x1*(i0))
static inline uint32_t A3XX_VFD_DECODE_INSTR_WRITEMASK(uint32_t val)
{
	return ((val) << 0) & 0xf;
}
#define A3XX_VFD_DECODE_INSTR_CONSTFILL				0x00000010
static inline uint32_t A3XX_VFD_DECODE_INSTR_FORMAT(enum a3xx_fmt val)
{
	return ((val) << 6) & 0xfc0;
}
static inline uint32_t A3XX_VFD_DECODE_INSTR_SHIFTCNT(uint32_t val)
{
	return ((val) << 24) & 0x1f000000;
}
#define A3XX_VFD_DECODE_INSTR_LASTCOMPVALID			0x20000000
#define A3XX_VFD_DECODE_INSTR_SWITCHNEXT			0x40000000

#define REG_A3XX_VFD_VS_THREADING_THRESHOLD			0x0000227e
static inline uint32_t A3XX_VFD_VS_THREADING_THRESHOLD_REGID_THRESHOLD(uint32_t val)
{
	return ((val) << 0) & 0xf;
}

#define REG_A3XX_VPC_ATTR					0x00002280
static inline uint32_t A3XX_VPC_ATTR_TOTALATTR(uint32_t val)
{
	return ((val) << 0) & 0xfff;
}
static inline uint32_t A3XX_VPC_ATTR_THRDASSIGN(uint32_t val)
{
	return ((val) << 12) & 0xffff000;
}
static inline uint32_t A3XX_VPC_ATTR_LMSIZE(uint32_t val)
{
	return ((val) << 28) & 0xf0000000;
}

#define REG_A3XX_VPC_PACK					0x00002281
static inline uint32_t A3XX_VPC_PACK_NUMFPNONPOSVAR(uint32_t val)
{
	return ((val) << 8) & 0xff00;
}
static inline uint32_t A3XX_VPC_PACK_NUMNONPOSVSVAR(uint32_t val)
{
	return ((val) << 16) & 0xff0000;
}

#define REG_A3XX_VPC_VARYING_INTERP(i0)			       (0x00002282 + 0x1*(i0))

#define REG_A3XX_VPC_VARYING_INTERP_MODE(i0)		       (0x00002282 + 0x1*(i0))

#define REG_A3XX_VPC_VARYING_PS_REPL(i0)		       (0x00002286 + 0x1*(i0))

#define REG_A3XX_VPC_VARYING_PS_REPL_MODE(i0)		       (0x00002286 + 0x1*(i0))

#define REG_A3XX_VPC_VARY_CYLWRAP_ENABLE_0			0x0000228a

#define REG_A3XX_VPC_VARY_CYLWRAP_ENABLE_1			0x0000228b

#define REG_A3XX_SP_SP_CTRL_REG					0x000022c0
static inline uint32_t A3XX_SP_SP_CTRL_REG_CONSTMODE(uint32_t val)
{
	return ((val) << 18) & 0xc0000;
}
static inline uint32_t A3XX_SP_SP_CTRL_REG_SLEEPMODE(uint32_t val)
{
	return ((val) << 20) & 0x300000;
}
static inline uint32_t A3XX_SP_SP_CTRL_REG_LOMODE(uint32_t val)
{
	return ((val) << 22) & 0xc00000;
}

#define REG_A3XX_SP_VS_CTRL_REG0				0x000022c4
static inline uint32_t A3XX_SP_VS_CTRL_REG0_THREADMODE(enum a3xx_threadmode val)
{
	return ((val) << 0) & 0x1;
}
static inline uint32_t A3XX_SP_VS_CTRL_REG0_INSTRBUFFERMODE(enum a3xx_instrbuffermode val)
{
	return ((val) << 1) & 0x2;
}
#define A3XX_SP_VS_CTRL_REG0_CACHEINVALID			0x00000004
static inline uint32_t A3XX_SP_VS_CTRL_REG0_HALFREGFOOTPRINT(uint32_t val)
{
	return ((val) << 4) & 0x3f0;
}
static inline uint32_t A3XX_SP_VS_CTRL_REG0_FULLREGFOOTPRINT(uint32_t val)
{
	return ((val) << 10) & 0x3fc00;
}
static inline uint32_t A3XX_SP_VS_CTRL_REG0_INOUTREGOVERLAP(uint32_t val)
{
	return ((val) << 18) & 0xc0000;
}
static inline uint32_t A3XX_SP_VS_CTRL_REG0_THREADSIZE(enum a3xx_threadsize val)
{
	return ((val) << 20) & 0x100000;
}
#define A3XX_SP_VS_CTRL_REG0_SUPERTHREADMODE			0x00200000
#define A3XX_SP_VS_CTRL_REG0_PIXLODENABLE			0x00400000
static inline uint32_t A3XX_SP_VS_CTRL_REG0_LENGTH(uint32_t val)
{
	return ((val) << 24) & 0xff000000;
}

#define REG_A3XX_SP_VS_CTRL_REG1				0x000022c5
static inline uint32_t A3XX_SP_VS_CTRL_REG1_CONSTLENGTH(uint32_t val)
{
	return ((val) << 0) & 0x3ff;
}
static inline uint32_t A3XX_SP_VS_CTRL_REG1_INITIALOUTSTANDING(uint32_t val)
{
	return ((val) << 20) & 0xf00000;
}
static inline uint32_t A3XX_SP_VS_CTRL_REG1_HALFPRECVAROFFSET(uint32_t val)
{
	return ((val) << 24) & 0x3f000000;
}

#define REG_A3XX_SP_VS_PARAM_REG				0x000022c6
static inline uint32_t A3XX_SP_VS_PARAM_REG_TOTALVSOUTVAR(uint32_t val)
{
	return ((val) << 20) & 0xfff00000;
}

#define REG_A3XX_SP_VS_OUT(i0)				       (0x000022c7 + 0x1*(i0))

#define REG_A3XX_SP_VS_OUT_REG(i0)			       (0x000022c7 + 0x1*(i0))
static inline uint32_t A3XX_SP_VS_OUT_REG_A_COMPMASK(uint32_t val)
{
	return ((val) << 9) & 0x1e00;
}
static inline uint32_t A3XX_SP_VS_OUT_REG_B_COMPMASK(uint32_t val)
{
	return ((val) << 9) & 0x1e00;
}

#define REG_A3XX_SP_VS_VPC_DST(i0)			       (0x000022d0 + 0x1*(i0))

#define REG_A3XX_SP_VS_VPC_DST_REG(i0)			       (0x000022d0 + 0x1*(i0))
static inline uint32_t A3XX_SP_VS_VPC_DST_REG_OUTLOC0(uint32_t val)
{
	return ((val) << 0) & 0xff;
}
static inline uint32_t A3XX_SP_VS_VPC_DST_REG_OUTLOC1(uint32_t val)
{
	return ((val) << 8) & 0xff00;
}
static inline uint32_t A3XX_SP_VS_VPC_DST_REG_OUTLOC2(uint32_t val)
{
	return ((val) << 16) & 0xff0000;
}
static inline uint32_t A3XX_SP_VS_VPC_DST_REG_OUTLOC3(uint32_t val)
{
	return ((val) << 24) & 0xff000000;
}

#define REG_A3XX_SP_VS_OBJ_OFFSET_REG				0x000022d4
static inline uint32_t A3XX_SP_VS_OBJ_OFFSET_REG_CONSTOBJECTOFFSET(uint32_t val)
{
	return ((val) << 16) & 0x1ff0000;
}
static inline uint32_t A3XX_SP_VS_OBJ_OFFSET_REG_SHADEROBJOFFSET(uint32_t val)
{
	return ((val) << 25) & 0xfe000000;
}

#define REG_A3XX_SP_VS_OBJ_START_REG				0x000022d5

#define REG_A3XX_SP_VS_PVT_MEM_CTRL_REG				0x000022d6

#define REG_A3XX_SP_VS_PVT_MEM_ADDR_REG				0x000022d7

#define REG_A3XX_SP_VS_PVT_MEM_SIZE_REG				0x000022d8

#define REG_A3XX_SP_VS_LENGTH_REG				0x000022df
static inline uint32_t A3XX_SP_VS_LENGTH_REG_SHADERLENGTH(uint32_t val)
{
	return ((val) << 0) & 0xffffffff;
}

#define REG_A3XX_SP_FS_CTRL_REG0				0x000022e0
static inline uint32_t A3XX_SP_FS_CTRL_REG0_THREADMODE(enum a3xx_threadmode val)
{
	return ((val) << 0) & 0x1;
}
static inline uint32_t A3XX_SP_FS_CTRL_REG0_INSTRBUFFERMODE(enum a3xx_instrbuffermode val)
{
	return ((val) << 1) & 0x2;
}
#define A3XX_SP_FS_CTRL_REG0_CACHEINVALID			0x00000004
static inline uint32_t A3XX_SP_FS_CTRL_REG0_HALFREGFOOTPRINT(uint32_t val)
{
	return ((val) << 4) & 0x3f0;
}
static inline uint32_t A3XX_SP_FS_CTRL_REG0_FULLREGFOOTPRINT(uint32_t val)
{
	return ((val) << 10) & 0x3fc00;
}
static inline uint32_t A3XX_SP_FS_CTRL_REG0_INOUTREGOVERLAP(uint32_t val)
{
	return ((val) << 18) & 0xc0000;
}
static inline uint32_t A3XX_SP_FS_CTRL_REG0_THREADSIZE(enum a3xx_threadsize val)
{
	return ((val) << 20) & 0x100000;
}
#define A3XX_SP_FS_CTRL_REG0_SUPERTHREADMODE			0x00200000
#define A3XX_SP_FS_CTRL_REG0_PIXLODENABLE			0x00400000
static inline uint32_t A3XX_SP_FS_CTRL_REG0_LENGTH(uint32_t val)
{
	return ((val) << 24) & 0xff000000;
}

#define REG_A3XX_SP_FS_CTRL_REG1				0x000022e1
static inline uint32_t A3XX_SP_FS_CTRL_REG1_CONSTLENGTH(uint32_t val)
{
	return ((val) << 0) & 0x3ff;
}
static inline uint32_t A3XX_SP_FS_CTRL_REG1_INITIALOUTSTANDING(uint32_t val)
{
	return ((val) << 20) & 0xf00000;
}
static inline uint32_t A3XX_SP_FS_CTRL_REG1_HALFPRECVAROFFSET(uint32_t val)
{
	return ((val) << 24) & 0x3f000000;
}

#define REG_A3XX_SP_FS_OBJ_OFFSET_REG				0x000022e2
static inline uint32_t A3XX_SP_FS_OBJ_OFFSET_REG_CONSTOBJECTOFFSET(uint32_t val)
{
	return ((val) << 16) & 0x1ff0000;
}
static inline uint32_t A3XX_SP_FS_OBJ_OFFSET_REG_SHADEROBJOFFSET(uint32_t val)
{
	return ((val) << 25) & 0xfe000000;
}

#define REG_A3XX_SP_FS_OBJ_START_REG				0x000022e3

#define REG_A3XX_SP_FS_PVT_MEM_CTRL_REG				0x000022e4

#define REG_A3XX_SP_FS_PVT_MEM_ADDR_REG				0x000022e5

#define REG_A3XX_SP_FS_PVT_MEM_SIZE_REG				0x000022e6

#define REG_A3XX_SP_FS_FLAT_SHAD_MODE_REG_0			0x000022e8

#define REG_A3XX_SP_FS_FLAT_SHAD_MODE_REG_1			0x000022e9

#define REG_A3XX_SP_FS_OUTPUT_REG				0x000022ec

#define REG_A3XX_SP_FS_MRT(i0)				       (0x000022f0 + 0x1*(i0))

#define REG_A3XX_SP_FS_MRT_REG(i0)			       (0x000022f0 + 0x1*(i0))
static inline uint32_t A3XX_SP_FS_MRT_REG_PRECISION(uint32_t val)
{
	return ((val) << 8) & 0x100;
}

#define REG_A3XX_SP_FS_IMAGE_OUTPUT(i0)			       (0x000022f4 + 0x1*(i0))

#define REG_A3XX_SP_FS_IMAGE_OUTPUT_REG(i0)		       (0x000022f4 + 0x1*(i0))
static inline uint32_t A3XX_SP_FS_IMAGE_OUTPUT_REG_MRTFORMAT(enum a3xx_color_format val)
{
	return ((val) << 0) & 0x3f;
}

#define REG_A3XX_SP_FS_LENGTH_REG				0x000022ff
static inline uint32_t A3XX_SP_FS_LENGTH_REG_SHADERLENGTH(uint32_t val)
{
	return ((val) << 0) & 0xffffffff;
}

#define REG_A3XX_TPL1_TP_VS_TEX_OFFSET				0x00002340
static inline uint32_t A3XX_TPL1_TP_VS_TEX_OFFSET_SAMPLEROFFSET(uint32_t val)
{
	return ((val) << 0) & 0xff;
}
static inline uint32_t A3XX_TPL1_TP_VS_TEX_OFFSET_MEMOBJOFFSET(uint32_t val)
{
	return ((val) << 8) & 0xff00;
}
static inline uint32_t A3XX_TPL1_TP_VS_TEX_OFFSET_BASETABLEPTR(uint32_t val)
{
	return ((val) << 16) & 0xffff0000;
}

#define REG_A3XX_UNKNOWN_2341					0x00002341

#define REG_A3XX_TPL1_TP_FS_TEX_OFFSET				0x00002342
static inline uint32_t A3XX_TPL1_TP_FS_TEX_OFFSET_SAMPLEROFFSET(uint32_t val)
{
	return ((val) << 0) & 0xff;
}
static inline uint32_t A3XX_TPL1_TP_FS_TEX_OFFSET_MEMOBJOFFSET(uint32_t val)
{
	return ((val) << 8) & 0xff00;
}
static inline uint32_t A3XX_TPL1_TP_FS_TEX_OFFSET_BASETABLEPTR(uint32_t val)
{
	return ((val) << 16) & 0xffff0000;
}

#define REG_A3XX_TPL1_TP_FS_BORDER_COLOR_BASE_ADDR		0x00002343

#define REG_A3XX_VBIF_CLKON					0x00003001

#define REG_A3XX_VBIF_FIXED_SORT_EN				0x0000300c

#define REG_A3XX_VBIF_FIXED_SORT_SEL0				0x0000300d

#define REG_A3XX_VBIF_FIXED_SORT_SEL1				0x0000300e

#define REG_A3XX_VBIF_ABIT_SORT					0x0000301c

#define REG_A3XX_VBIF_ABIT_SORT_CONF				0x0000301d

#define REG_A3XX_VBIF_GATE_OFF_WRREQ_EN				0x0000302a

#define REG_A3XX_VBIF_IN_RD_LIM_CONF0				0x0000302c

#define REG_A3XX_VBIF_IN_RD_LIM_CONF1				0x0000302d

#define REG_A3XX_VBIF_IN_WR_LIM_CONF0				0x00003030

#define REG_A3XX_VBIF_IN_WR_LIM_CONF1				0x00003031

#define REG_A3XX_VBIF_OUT_RD_LIM_CONF0				0x00003034

#define REG_A3XX_VBIF_OUT_WR_LIM_CONF0				0x00003035

#define REG_A3XX_VBIF_DDR_OUT_MAX_BURST				0x00003036

#define REG_A3XX_VBIF_ARB_CTL					0x0000303c

#define REG_A3XX_VBIF_ROUND_ROBIN_QOS_ARB			0x00003049

#define REG_A3XX_VBIF_OUT_AXI_AMEMTYPE_CONF0			0x00003058

#define REG_A3XX_VBIF_OUT_AXI_AOOO_EN				0x0000305e

#define REG_A3XX_VBIF_OUT_AXI_AOOO				0x0000305f

#define REG_A3XX_VSC_BIN_SIZE					0x00000c01

#define REG_A3XX_VSC_SIZE_ADDRESS				0x00000c02

#define REG_A3XX_VSC_PIPE(i0)				       (0x00000c06 + 0x3*(i0))

#define REG_A3XX_VSC_PIPE_CONFIG(i0)			       (0x00000c06 + 0x3*(i0))

#define REG_A3XX_VSC_PIPE_DATA_ADDRESS(i0)		       (0x00000c07 + 0x3*(i0))

#define REG_A3XX_VSC_PIPE_DATA_LENGTH(i0)		       (0x00000c08 + 0x3*(i0))

#define REG_A3XX_UNKNOWN_0C3D					0x00000c3d

#define REG_A3XX_UNKNOWN_0C81					0x00000c81

#define REG_A3XX_GRAS_CL_USER_PLANE(i0)			       (0x00000ca0 + 0x4*(i0))

#define REG_A3XX_GRAS_CL_USER_PLANE_X(i0)		       (0x00000ca0 + 0x4*(i0))

#define REG_A3XX_GRAS_CL_USER_PLANE_Y(i0)		       (0x00000ca1 + 0x4*(i0))

#define REG_A3XX_GRAS_CL_USER_PLANE_Z(i0)		       (0x00000ca2 + 0x4*(i0))

#define REG_A3XX_GRAS_CL_USER_PLANE_W(i0)		       (0x00000ca3 + 0x4*(i0))

#define REG_A3XX_RB_GMEM_BASE_ADDR				0x00000cc0

#define REG_A3XX_RB_WINDOW_SIZE					0x00000ce0
static inline uint32_t A3XX_RB_WINDOW_SIZE_WIDTH(uint32_t val)
{
	return ((val) << 0) & 0x3fff;
}
static inline uint32_t A3XX_RB_WINDOW_SIZE_HEIGHT(uint32_t val)
{
	return ((val) << 14) & 0xfffc000;
}

#define REG_A3XX_UNKNOWN_0E00					0x00000e00

#define REG_A3XX_UNKNOWN_0E43					0x00000e43

#define REG_A3XX_VFD_PERFCOUNTER0_SELECT			0x00000e44

#define REG_A3XX_VPC_VPC_DEBUG_RAM_SEL				0x00000e61

#define REG_A3XX_VPC_VPC_DEBUG_RAM_READ				0x00000e62

#define REG_A3XX_UCHE_CACHE_MODE_CONTROL_REG			0x00000e82

#define REG_A3XX_UCHE_CACHE_INVALIDATE0_REG			0x00000ea0
static inline uint32_t A3XX_UCHE_CACHE_INVALIDATE0_REG_ADDR(uint32_t val)
{
	return ((val) << 0) & 0xfffffff;
}

#define REG_A3XX_UCHE_CACHE_INVALIDATE1_REG			0x00000ea1
static inline uint32_t A3XX_UCHE_CACHE_INVALIDATE1_REG_ADDR(uint32_t val)
{
	return ((val) << 0) & 0xfffffff;
}
#define A3XX_UCHE_CACHE_INVALIDATE1_REG_OPCODE_INVALIDATE	0x0100000000000000ULL
#define A3XX_UCHE_CACHE_INVALIDATE1_REG_ENTIRE_CACHE		0x80000000

#define REG_A3XX_UNKNOWN_0EC4					0x00000ec4

#define REG_A3XX_UNKNOWN_0EC8					0x00000ec8

#define REG_A3XX_SP_PERFCOUNTER7_SELECT				0x00000ecb

#define REG_A3XX_UNKNOWN_0EE0					0x00000ee0

#define REG_A3XX_UNKNOWN_0f03					0x00000f03


#endif /* A3XX_XML */
